sequenceDiagram
    title Farm Manager Stake Pending Claim Flow
    
    actor User
    participant FarmManager
    participant Farm
    participant RewardFarm
    participant RewardToken
    participant LayerZero

    %% Request Claim Flow
    rect rgb(180, 180, 255)
        Note over User,RewardToken: Request Claim Flow
        User->>+FarmManager: requestClaim(farm, amount, receiver)
        
        %% Update Reward
        FarmManager->>+Farm: requestClaim(amount, owner, receiver)
        Farm->>Farm: _beforeRequestClaim()
        Farm->>Farm: _checkIsClaimable()
        Farm->>Farm: _updateReward(owner)
        
        %% Request Claim
        Farm->>Farm: claimableTime = block.timestamp + claimDelayTime
        Farm->>Farm: claimId = keccak256(amount, owner, receiver, claimableTime)
        Farm->>Farm: _claimStatus[claimId] = PENDING
        Farm->>Farm: _updatePendingReward(owner, amount, false)
        Farm-->>-FarmManager: return (claimAmt, claimableTime, claimId)
        
        FarmManager-->>-User: return (claimAmt, claimableTime, claimId)
    end

    %% Local Stake Pending Claim Flow
    rect rgb(200, 200, 255)
        Note over User,RewardToken: Local Stake Pending Claim Flow
        User->>+FarmManager: stakePendingClaim(claimId, amount, owner, receiver, claimableTime)
        
        %% Check and Update Claim Status
        FarmManager->>+Farm: getClaimStatus(claimId)
        Farm-->>-FarmManager: return ClaimStatus
        
        FarmManager->>Farm: verify ClaimStatus == PENDING
        FarmManager->>Farm: verify claimableTime <= block.timestamp
        
        %% Force Execute Claim to FarmManager
        FarmManager->>+Farm: forceExecuteClaim(amount, owner, farmManager, claimableTime, claimId)
        Farm->>Farm: _beforeForceExecuteClaim()
        Farm->>Farm: _checkClaimId()
        Farm->>Farm: _claimStatus[claimId] = CLAIMED
        Farm->>FarmManager: mintRewardCallback(farmManager, amount)
        FarmManager->>RewardToken: mint(farmManager, amount)
        Farm-->>-FarmManager: emit ForceClaimExecuted(claimId, amount, owner, farmManager)
        
        %% Stake to RewardFarm
        FarmManager->>RewardToken: approve(farmManager, amount)
        FarmManager->>+RewardFarm: depositERC20(amount, farmManager, receiver)
        RewardFarm->>RewardFarm: _beforeDeposit()
        RewardFarm->>RewardFarm: _updateReward(receiver)
        RewardToken->>RewardFarm: transferFrom(farmManager, rewardFarm, amount)
        RewardFarm->>RewardFarm: _updateShares()
        RewardFarm-->>-FarmManager: emit Deposit(amount, farmManager, receiver)
        
        FarmManager-->>-User: return (claimedAmount, stakedAmount)
    end

    %% Cross Chain Stake Pending Claim Flow
    rect rgb(220, 220, 255)
        Note over User,LayerZero: Cross Chain Stake Pending Claim Flow
        User->>+FarmManager: stakePendingClaimCrossChain(params, adapterParams)
        
        %% Check and Update Claim Status
        FarmManager->>+Farm: getClaimStatus(params.claimId)
        Farm-->>-FarmManager: return ClaimStatus
        
        FarmManager->>Farm: verify ClaimStatus == PENDING
        FarmManager->>Farm: verify params.claimableTime <= block.timestamp
        
        %% Force Execute Claim to FarmManager
        FarmManager->>+Farm: forceExecuteClaim(params.amount, params.owner, farmManager, params.claimableTime, params.claimId)
        Farm->>Farm: _beforeForceExecuteClaim()
        Farm->>Farm: _checkClaimId()
        Farm->>Farm: _claimStatus[claimId] = CLAIMED
        Farm->>FarmManager: mintRewardCallback(farmManager, amount)
        FarmManager->>RewardToken: mint(farmManager, amount)
        Farm-->>-FarmManager: emit ForceClaimExecuted(claimId, params.amount, params.owner, farmManager)
        
        %% Send Cross Chain Message
        FarmManager->>RewardToken: approve(rewardToken, amount)
        FarmManager->>RewardToken: sendAndCall(dstChainId, receiver, amount, payload, adapterParams)
        RewardToken->>LayerZero: send cross chain message
        
        FarmManager-->>-User: return (claimedAmount)
    end 